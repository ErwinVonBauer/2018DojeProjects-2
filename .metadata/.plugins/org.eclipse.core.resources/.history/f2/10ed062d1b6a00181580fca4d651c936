package com.groupware.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.ModelAndView;

import com.groupware.dao.AprovDao;
import com.groupware.dao.DraftDao;
import com.groupware.dao.LineDao;
import com.groupware.dao.UserDao;
import com.groupware.vo.ApprovalVo;

@Service
@SuppressWarnings("rawtypes")
public class AprovService {
	@Autowired CommonService commonservice;
	@Autowired AprovDao aprovdao;
	@Autowired LineDao linedao;
	@Autowired DraftDao draftdao;
	@Autowired UserDao userdao;
	
	public ModelAndView showmakeapproval(HttpServletRequest req) {
		String[] docspk = draftdao.selectDocsPK(); //문서PK
		String[] docs = draftdao.selectDocNames(); //문서명
		String[] aplspk = linedao.selectAplsPK();
		String[] aplsname = linedao.selectAplsName();
		String [] userspk = userdao.selectUsersPK();
		String [] users = userdao.selectUsers();
		
		HashMap<String, Integer> docmap = new HashMap<String, Integer>(); //문서PK+문서명
		HashMap<String, Integer> aplmap = new HashMap<String, Integer>(); //라인PK+라인명
		HashMap<Integer,String> usermap = new HashMap<Integer,String>(); //유저PK+유저명
		ModelAndView view = new ModelAndView();
		
		for(int i=0;i<docspk.length;i++) {
			docmap.put(docs[i], Integer.parseInt(docspk[i]));
		}
		
		for(int i=0;i<aplspk.length;i++) {
			aplmap.put(aplsname[i], Integer.parseInt(aplspk[i]));
		}
		
		for(int i=0;i<userspk.length;i++) {
			usermap.put(Integer.parseInt(userspk[i]),users[i]);
		}
		
		view.setViewName("/makeapproval");
		view.addObject("docmap", docmap);
		view.addObject("aplmap", aplmap);
		view.addObject("usermap",usermap);
		
		return view;
	}
	
	public String insertaprov(ApprovalVo aprovvo,String view){
		int dep_ai = userdao.selectDepPKbyUserPK(aprovvo.getUser_ai());
		int rank_ai = userdao.selectRankPKbyUserPK(aprovvo.getUser_ai());
		aprovvo.setDep_ai(dep_ai);
		aprovvo.setRank_ai(rank_ai);
		aprovdao.insertAprov(aprovvo);
		return view;
	}
	
	public List<ApprovalVo> getaprovlist(HttpServletRequest req) {
		String userid = (String) req.getParameter("userid");
		int user_ai = userdao.selectUserPK(userid);
		
		List<HashMap> aprovlist = aprovdao.selectAprovbyUserPK(user_ai);
		List<ApprovalVo> aprovvos = new ArrayList<ApprovalVo>();
		aprovvos = commonservice.makeAprovVoList(aprovlist);
		
		return aprovvos;
	}
	
	public ModelAndView completeaprov(HttpServletRequest req,String viewName) {
		ModelAndView view = new ModelAndView();
		int aprov_pk = Integer.parseInt(req.getParameter("pk"));
		System.out.println(aprov_pk);
		
		aprovdao.updateAprovStatus(aprov_pk);
		view.setViewName(viewName);
		return view;
	}
	
	public List<ApprovalVo> aprovsearch(HttpServletRequest req) {
		String[] reqarray = req.getParameterValues("searchinfos");
		String[] searchinfos = reqarray[0].split(",");
		String searchoption = searchinfos[0];
		String keyword = searchinfos[1];	
		List<ApprovalVo> aprovvos = new ArrayList<ApprovalVo>();
		
		//리팩토링 필요,임시메소드
		if(searchoption.equals("dep")) {
			int dep_pk = userdao.selectDepPKbyDepName(keyword);
			List<HashMap> deplist = aprovdao.selectAprovByDep(dep_pk);
			aprovvos = makeSearchList(deplist, aprovvos);
		}else if(searchoption.equals("doc")) {
			int draft_pk = draftdao.selectDocPKbyDraftName(keyword);
			List<HashMap> doclist = aprovdao.selectAprovByDoc(draft_pk);
			aprovvos = makeSearchList(doclist, aprovvos);
		}else if(searchoption.equals("rank")) {
			int rank_pk = userdao.selectRankPKByRankName(keyword);
			List<HashMap> ranklist = aprovdao.selectAprovByRank(rank_pk);
			aprovvos = makeSearchList(ranklist, aprovvos);
		}else if(searchoption.equals("name")) {
			List<HashMap> namelist = aprovdao.selectAprovByName(keyword);
			aprovvos = makeSearchList(namelist, aprovvos);
		}else if(searchoption.equals("all")) {
			List<HashMap> alllist = aprovdao.selectAllAprov();
			aprovvos = makeSearchList(alllist, aprovvos);
		}
		return aprovvos;
	}
	
}
